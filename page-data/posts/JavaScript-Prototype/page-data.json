{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/JavaScript-Prototype","result":{"data":{"markdownRemark":{"id":"b50d5960-9de1-51b7-8280-0218d982637c","html":"<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>之前在學習 Prototype 的時候算是斷斷續續在理解的，怎麼說呢 ? 一開始是在上課的時候學習，那時候懂了一半，而接續兩次作業之後又認為自己懂了，這是第二次以為自己理解。\n直到最近準備面試題目，學習 JavaScript 內的 OOP 時，發現對於 Prototype 的理解還是不太記得，於是就想說這次一氣呵成整理一下。\n因為是複習，所以不算非常全面，若有錯誤也希望能夠被指正，這樣的機會是可遇不可求的。</p>\n<hr>\n<h2 id=\"一切的一切，都從-javascript-中的物件導向開始\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E5%88%87%E7%9A%84%E4%B8%80%E5%88%87%EF%BC%8C%E9%83%BD%E5%BE%9E-javascript-%E4%B8%AD%E7%9A%84%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E9%96%8B%E5%A7%8B\" aria-label=\"一切的一切，都從 javascript 中的物件導向開始 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一切的一切，都從 JavaScript 中的物件導向開始</h2>\n<p>什麼是物件導向 ? 我相信你已經爬過一些文章了，這些文章大多用狗和汽車來做舉例，也就是我有一張設計圖，然後利用這張設計圖來創造一些實體 (instance)，在 JavaScript ES5 中，看起來會是這個樣子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> ford <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span></code></pre></div>\n<p>都一樣印出 red，但不要誤會了，第一個 <code class=\"language-text\">red</code> 是因為我們利用 <code class=\"language-text\">Car</code> 這個建構子 (中國翻作構造函式)，實作出了 <code class=\"language-text\">ford</code> 這個物件，然後我們去印出 <code class=\"language-text\">ford.color</code> 這個屬性。而第二個 <code class=\"language-text\">red</code> 是我利用 prototype 定義了 <code class=\"language-text\">getName</code> 這個函式來回傳 instance 的 <code class=\"language-text\">color</code> 屬性。</p>\n<p>這也是我第一次看到 prototype，從上面的例子理解的話，它就有點像是一個設定檔，我可以添加一個方法，然後來做我想要做的事情，如果就使用上來講，了解到這樣的確就足夠了，但感覺好像還是哪裏怪怪的。</p>\n<hr>\n<p>我寫過幾萬次的 function 了，怎麼都沒察覺 prototype 這個東西 ?\n我再貼一次剛剛的例子 :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ford <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span></code></pre></div>\n<p>先假設你不知道如何在 JavaScript 中實作 OOP，那麼 <code class=\"language-text\">Car</code> 在你眼中看來就不過是一個普通的 Function 而已。\n另外就是 Car 第一個字母是大寫，也不會改變它是一個 Function 的事實，裡面的 <code class=\"language-text\">this</code> 也一樣，不會影響到這個 Function 的本質。\n好，現在請你恢復記憶，想起我們現在在講 OOP，一切都沒有改變，<code class=\"language-text\">Car</code> 之所以第一個字母大寫，是一個做為建構子的習慣用法，<code class=\"language-text\">this</code> 指的則是 instance，大概就是這樣，<code class=\"language-text\">Car</code> 依舊是一個函式，它仍然作為一個身為 Function 的職責。\n那麼既然 <code class=\"language-text\">Car</code> 依然是一個普通的 Function，但它可以使用 <code class=\"language-text\">prototype</code> 來定義方法，那我們是不是可以推論，其實 Function 都帶有 prototype ?\n為了驗證上述說法，我們寫一段 Code :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ya'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Car {}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// test {}</span></code></pre></div>\n<p>這邊我宣告了一個普通函式叫做 <code class=\"language-text\">test</code>，然後我印出兩者的 prototype，可以看到分別是 <code class=\"language-text\">Car { }</code> 與 <code class=\"language-text\">test { }</code> 兩個物件，為了驗證 prototype 就是我印出的這個 <code class=\"language-text\">{ }</code>，我幫他們的 prototype 都加上了新的屬性 and 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ya'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 加入新方法</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 加入新屬性</span>\ntest<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sayHi <span class=\"token operator\">=</span> <span class=\"token string\">'Hi'</span>\n<span class=\"token comment\">// { } 內有東西了</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Car { getName: [Function] }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// test { sayHi: 'Hi' }</span></code></pre></div>\n<p>大家在學習最基礎的物件時，應該都記得如果要幫物件增加屬性的話，直接用 . 運算子就好，所以其實 <code class=\"language-text\">Car.prototype.getName</code> 與 <code class=\"language-text\">test.prototype.sayHi</code> 也是在做一樣的事情，既然針對 <code class=\"language-text\">prototype</code> 增加屬性會得到 <code class=\"language-text\">{ getName: [Function] }</code> 與 <code class=\"language-text\">{ sayHi: &#39;Hi&#39; }</code> 的結果，那我們也可以明白，一開始印出的 <code class=\"language-text\">{ }</code> 就是 Prototype</p>\n<p>也就是說 Prototype 本身就是個物件，而且宣告函式時會自動附帶，跟我這個函式要不要作為建構子一點關係都沒有，那之所以過去宣告 Function 時都沒有用到，是因為我們沒有利用 Function 作為建構子，也就是說，我們沒有 new 出 instance，所以在使用時機上就不太用得到。\n但其實你早就接觸過了。</p>\n<hr>\n<h2 id=\"__proto__-與-objectgetprototypeof\" style=\"position:relative;\"><a href=\"#__proto__-%E8%88%87-objectgetprototypeof\" aria-label=\"__proto__ 與 objectgetprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">__proto__</code> 與 <code class=\"language-text\">Object.getPrototypeOf()</code></h2>\n<p>要看一個 instance 是會找向哪一個 Prototype，用 <code class=\"language-text\">__proto__</code> 就可以看出來了，用我們最初的範例來舉例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ford <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Car { getName: [Function] }</span>\n<span class=\"token comment\">// __proto__</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Car { getName: [Function] }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>而比起 <code class=\"language-text\">__proto__</code> ，其實更推薦使用 <code class=\"language-text\">Object.getPrototypeOf()</code> 這個語法，它會 return 該 instance 指向的 Prototype，這個用法感覺也比較技術性：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ford <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Car { getName: [Function] }</span>\n<span class=\"token comment\">// 使用 Object.getPrototypeOf(instance)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Car { getName: [Function] }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>那為什麼會提 <code class=\"language-text\">__proto__</code> ? 如果用白話來表示，我會習慣稱呼它為「該物件所指向的原型」，「原型」指的就是 Prototype， 因為 <code class=\"language-text\">ford</code> 是 new 自於 <code class=\"language-text\">Car</code> 的，所以 <code class=\"language-text\">ford.__proto__</code> 就會指向 <code class=\"language-text\">Car.prototype</code>，也就是都指向同一個記憶體位置。\n既然物件可以用 <code class=\"language-text\">__proto__</code> 來找到它的原型，那我們來試試看下列幾個：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ford <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// { }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Function]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span></code></pre></div>\n<p>上面分別對 <code class=\"language-text\">Car.prototype</code> 與 Car 做了 <code class=\"language-text\">__proto__</code> 的探測，比對結果簡述以下：\n首先，<code class=\"language-text\">Car.prototype</code> 是一個物件，這是我們剛剛得到的結論，這個物件的存在表面上與 <code class=\"language-text\">function Car() { }</code> 本身沒有關係，在程式碼中他們是不同的兩個部分 (我當初也以為 <code class=\"language-text\">Car.prototype</code> 這一段是把 function 中的程式碼寫到外面，以為是 function 的一部分，這種想法是錯的)</p>\n<p>但是在底層，<code class=\"language-text\">Car.prototype</code> 就像是顆衛星一樣環繞在 <code class=\"language-text\">Car</code> 身邊，這點是沒錯，畢竟我們剛剛也說了，宣告函式時會自帶一個 <code class=\"language-text\">prototype</code>。\n接下來一一講解 :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// { }</span></code></pre></div>\n<p><code class=\"language-text\">Car.prototype.__proto__</code> 就是 Car.prototype 所指向的原型，因為是物件，所以印出 <code class=\"language-text\">{ }</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">Car.prototype.__proto__</code> 與 <code class=\"language-text\">Object.prototype</code> 指向同一個記憶體位置，因為剛剛說過了，它是物件嘛，所以源自於物件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span></code></pre></div>\n<p>之所以回傳 <code class=\"language-text\">null</code>，代表再往上找已經沒有東西了，可以確定 <code class=\"language-text\">Object.prototype</code> 就是最頂層無誤。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Function]</span></code></pre></div>\n<p><code class=\"language-text\">Car.__proto__</code> 就是 <code class=\"language-text\">Car</code> 所指向的原型，因為是函式，所以印出 <code class=\"language-text\">[Function]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">Car.__proto__</code> 與 <code class=\"language-text\">Function.prototype</code> 指向同一個記憶體位置，前面也說過了，它是函式嘛</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { }</span></code></pre></div>\n<p>那為什麼 <code class=\"language-text\">Car.__proto__.__proto__</code> - 也就是 <code class=\"language-text\">Function.prototype.__proto__</code> 是印出 <code class=\"language-text\">{ }</code> ? 因為 Prototype 本身是物件，所以源自於物件無誤。</p>\n<p>所以接下來的 <code class=\"language-text\">Car.__proto__.__proto__.__proto__</code> 已經找到了最頂層以外了，所以回傳 <code class=\"language-text\">null</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span></code></pre></div>\n<p>等等，你有沒有發現察覺到了什麼 ?</p>\n<p>如果在最初的例子，<code class=\"language-text\">ford</code> 是 <code class=\"language-text\">Car</code> 的 instance，所以 <code class=\"language-text\">ford.__proto__</code> 指涉到了 <code class=\"language-text\">Car.prototype</code>，那麼回過頭來說，<code class=\"language-text\">Car.__proto__</code> 之所以會指涉到 <code class=\"language-text\">Function.prototype</code>，是不是代表我宣告 <code class=\"language-text\">Car</code> 這個函式時，也等於是我 new 了一個新函式 ?</p>\n<p>換句話說，<code class=\"language-text\">Car</code> 是 Function 的 instance 嗎 ?</p>\n<p>不只是函式，讓我們也針對物件(Object) 與陣列(Array) 實驗看看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// new 一個 Function</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'return a + b'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// new 一個 Object</span>\n<span class=\"token keyword\">var</span> objA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> objB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span><span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 一般宣告物件方式</span>\nobjA<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\nobjA<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span>\n<span class=\"token comment\">// new 一個 Array</span>\n<span class=\"token keyword\">var</span> arrA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> arrB <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 一般宣告陣列方式</span>\narrA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\narrA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">)</span> <span class=\"token comment\">// a: 'a', b: 'b'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">)</span> <span class=\"token comment\">// a: 'a', b: 'b'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrA<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrB<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2]</span></code></pre></div>\n<p>上面我 new 了一個 Function 並代入了一些參數，最後一個參數是函式內容，所以實際上與我們一般宣告函式無異。(這是宣告函式的其中一種方法)\n物件的部分我也是 new 了一個 Object，並利用 . 加入屬性，得到的結果與下面一般宣告物件方式相同。\n陣列的部分與物件差不多，就不多做說明。\n由上述可以了解，我們一般宣告函式、物件與陣列，實際上都是 new 一個新的 instance，所以 JavaScript 的 OOP 實現方式，一直以來我們早就在做了，只是我們沒有察覺而已，所以前面才說我們其實早就接觸過了。\n有了以上的緣故，我們就可以理解為什麼 <code class=\"language-text\">Car.__proto__</code> 會指向 <code class=\"language-text\">Function.prototype</code> 了。</p>\n<hr>\n<h2 id=\"一起來拆解-new\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E8%B5%B7%E4%BE%86%E6%8B%86%E8%A7%A3-new\" aria-label=\"一起來拆解 new permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一起來拆解 new</h2>\n<p>上一段的最後一句，寫道 <code class=\"language-text\">Car.__proto__</code> 會指向 <code class=\"language-text\">Function.prototype</code> ，但我比較習慣稱兩者是指向同一個記憶體位置，原因是因為 new 本身做了一些事情。</p>\n<p>現在先假設我們不知道有 new，然後我寫一些 code，以模擬讓 Car 這個函式實體化一個 instance</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getColor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">newCar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 建立一個空物件 </span>\n    obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// 指派空物件的 __proto__ 為 Car.prototype </span>\n    <span class=\"token function\">Car</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 傳入空物件為 this</span>\n    <span class=\"token keyword\">return</span> obj <span class=\"token comment\">// 回傳該物件</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> ford <span class=\"token operator\">=</span> <span class=\"token function\">newCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span>\nford<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// black</span></code></pre></div>\n<p>首先會建立一個空物件\n並將 <code class=\"language-text\">Car.prototype</code> 指派給該物件的 <code class=\"language-text\">__proto__</code> ，使兩者指向相同\n之後利用 <code class=\"language-text\">.call</code> 將空物件傳入 Car 裡面的 this 並指定了 <code class=\"language-text\">color</code> (也就是 <code class=\"language-text\">obj.color</code>)，並指派了參數 <code class=\"language-text\">color</code> 為值\n最後回傳這個 obj</p>\n<p>以上大概就是 new 做的事情，由於最後是回傳物件，所以 ford 也是一個物件沒錯。\n而第二步的 <code class=\"language-text\">obj.__proto__ = Car.prototype</code>，也證明了兩者是指向同一個記憶體位置沒錯，當然你也可以說 <code class=\"language-text\">obj.__proto__</code> 指向 <code class=\"language-text\">Car.prototype</code>，這並不衝突。</p>\n<hr>\n<h2 id=\"原型鍊總結-prototype-chain\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%9E%8B%E9%8D%8A%E7%B8%BD%E7%B5%90-prototype-chain\" aria-label=\"原型鍊總結 prototype chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原型鍊總結 (Prototype Chain)</h2>\n<p>最後，我們再重溫一下一開始的範例</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ford <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span></code></pre></div>\n<p><code class=\"language-text\">ford</code> 本身沒有 <code class=\"language-text\">getName</code> 這個函式，但你知道為什麼可以這樣呼叫，因為 new 幫我們做了一切，如果不使用 new， <code class=\"language-text\">Car</code> 本身就只是一個不回傳值的普通函式而已，<code class=\"language-text\">Car.prototype</code> 也沒有上場的機會。</p>\n<p>假設 <code class=\"language-text\">Car.prototype</code> 自已也沒有 <code class=\"language-text\">getName</code>，但我若寫在更上層的 <code class=\"language-text\">Object.prototype.getName = function ...</code>，那麼 <code class=\"language-text\">ford</code> 也可以存取得到，因為 <code class=\"language-text\">ford</code> 會透過 <code class=\"language-text\">__proto__</code> 繼續往上查找，我們在稍早也模擬過這個過程。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 設在 Object.prototype</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> ford <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ford<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// red</span></code></pre></div>\n<p>透過 <code class=\"language-text\">ford.__proto__</code> 往上查找 <code class=\"language-text\">Car.prototype</code> 發現沒有 <code class=\"language-text\">getName</code>，於是又透過 <code class=\"language-text\">Car.prototype.__proto__</code> 往上查找 <code class=\"language-text\">Object.prototype</code>，終於找到了 <code class=\"language-text\">getName</code> 這個方法並執行，這樣的查找路線，我們就稱之為原型鍊 ( Prototype Chain )</p>\n<hr>\n<p>參考資料：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></li>\n<li><a href=\"https://cythilya.github.io/2018/10/26/prototype/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">桑莫的 Prototype 介紹</a></li>\n<li><a href=\"https://blog.techbridge.cc/2017/04/22/javascript-prototype/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">該來理解 JavaScript 原形鍊了</a></li>\n</ul>","fields":{"slug":"/posts/JavaScript-Prototype","tagSlugs":["/tag/java-script/","/tag/web-development/"]},"frontmatter":{"date":"2021-03-24T22:40:32.169Z","description":"講解基本的 ProtoType，幫助新手能夠更快理解","tags":["JavaScript","Web Development"],"title":"理解基礎的 JavaScript Prototype","socialImage":{"publicURL":"/static/6d93cbc4956a854d4c4369f0e281e7f3/42-line-bible.jpg"}}}},"pageContext":{"slug":"/posts/JavaScript-Prototype"}},"staticQueryHashes":["251939775","401334301","825871152"]}